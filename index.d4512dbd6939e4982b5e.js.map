{"version":3,"sources":["webpack://ts-static-webapp-template/./src/lib/constants.ts","webpack://ts-static-webapp-template/./src/lib/index.ts","webpack://ts-static-webapp-template/./src/index.ts"],"names":["ASCII_HEX_REGEXP","init","initConverter","initAttributes","set","key","value","attributes","document","expires","Date","now","toUTCString","encode","attrStr","Object","entries","reduce","prevStr","attrPair","attrKey","attrValue","split","cookie","create","get","cookiePairs","cookieStore","some","pair","curtKey","curtValue","decodeedValue","decode","join","e","del","withConverter","customConverter","this","converter","withAttributes","customAttributes","freeze","text","replace","encodeURIComponent","decodeURIComponent","path","myCookies","$getForm","querySelector","$setForm","$delForm","$setKey","$setValue","$getKey","$getValue","$delKey","$withConverter","$withAttributes","$cookie","onsubmit","preventDefault","textContent","onclick"],"mappings":"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","file":"index.d4512dbd6939e4982b5e.js","sourcesContent":["import {Attributes, Converter} from './types'\n\n// 1000*60*60*24 or 86400000\n// 详见：https://stackoverflow.com/questions/18359401/javascript-date-gettime-code-snippet-with-mysterious-additional-characters\nexport const TWENTY_FOUR_HOURS = 864e5\n\nexport const ASCII_HEX_REGEXP = /(%[\\dA-F]{2})+/gi\n\n// 默认 Cookie 属性\nexport const defaultAttributes: Attributes = {\n  path: '/'\n}\n// 默认 Cookie 值的转换器\nexport const defaultConverter: Converter = {\n  encode(text: string) {\n    return text.replace(ASCII_HEX_REGEXP, encodeURIComponent)\n  },\n  decode(text: string) {\n    return text.replace(ASCII_HEX_REGEXP, decodeURIComponent)\n  },\n}\n","/**\n * 获取单个 Cookie\n */\nimport {defaultAttributes, defaultConverter, TWENTY_FOUR_HOURS} from './constants'\nimport {Attributes, Converter} from './types'\n\ninterface Cookie {\n  get: (key: string) => string | null\n  set: (key: string, value: string) => void\n  del: (key: string) => void\n  withConverter: (converter: Converter) => Cookie\n  withAttributes: (attributes: Partial<Attributes>) => Cookie\n}\n\nfunction init(initConverter: Converter, initAttributes: Attributes): Cookie {\n  function get(key: string): string | null {\n    if (typeof document === 'undefined') return null\n\n    const cookiePairs = document.cookie ? document.cookie.split('; ') : []\n\n    const cookieStore: Record<string, string> = {}\n\n    cookiePairs.some(pair => {\n      const [curtKey, ...curtValue] = pair.split('=')\n\n      try {\n        const decodeedValue = initConverter.decode(curtValue.join('='))  // 有可能 value 存在 '='\n        cookieStore[curtKey] = decodeedValue\n      } catch (e) {}\n\n      return curtKey === key // 如果相等时，就会 break\n    })\n\n    return key ? cookieStore[key] : null\n  }\n\n  /**\n   * 设置 Cookie key-val 对\n   */\n  function set(key: string, value: string, attributes = initAttributes) {\n    if (typeof document === 'undefined') return null\n\n    attributes = {...initAttributes, ...attributes}\n\n    if (attributes.expires) {\n      // 将过期天数转为 UTC string\n      if (typeof attributes.expires === 'number') {\n        attributes.expires = new Date(Date.now() + attributes.expires * TWENTY_FOUR_HOURS)\n        attributes.expires = attributes.expires.toUTCString()\n      }\n    }\n\n    value = initConverter.encode(value)\n\n    // 获取 Cookie 其它属性的字符串形式\n    const attrStr = Object.entries(attributes).reduce((prevStr, attrPair) => {\n      const [attrKey, attrValue] = attrPair\n\n      if (!attrValue) return prevStr\n\n      prevStr += `; ${attrKey}`\n\n      // attrValue 有可能为 truthy，所以要排除 true 值的情况\n      if (attrValue === true) return prevStr\n\n      // 排除 attrValue 存在 \";\" 号的情况\n      prevStr += `=${attrValue.split('; ')[0]}`\n\n      return prevStr\n    }, '')\n\n    return document.cookie = `${key}=${value}${attrStr}`\n  }\n\n  /**\n   * 删除某个 Cookie\n   */\n  function del(key: string, attributes = initAttributes) {\n    // 将 expires 减 1 天，Cookie 自动失败\n    set(key, '', {...attributes, expires: -1})\n  }\n\n  /**\n   * 添加自定义 converter\n   */\n  function withConverter(customConverter: Converter) {\n    return init({...this.converter, ...customConverter}, this.attributes)\n  }\n\n  /**\n   * 添加自定义 attributes\n   */\n  function withAttributes(customAttributes: Attributes) {\n    return init(this.converter, {...this.attributes, ...customAttributes})\n  }\n\n  return Object.create(\n    {get, set, del, withConverter, withAttributes},\n    {\n      converter: {value: Object.freeze(initConverter)},\n      attributes: {value: Object.freeze(initAttributes)},\n    }\n  )\n}\n\nexport default init(defaultConverter, defaultAttributes)\n","import Cookies from './lib/index'\n\nlet myCookies = Cookies\n\nconst $getForm = document.querySelector<HTMLFormElement>('#getForm')\nconst $setForm = document.querySelector<HTMLFormElement>('#setForm')\nconst $delForm = document.querySelector<HTMLFormElement>('#delForm')\n\nconst $setKey = document.querySelector<HTMLInputElement>('#setKey')\nconst $setValue = document.querySelector<HTMLInputElement>('#setValue')\n\nconst $getKey = document.querySelector<HTMLInputElement>('#getKey')\nconst $getValue = document.querySelector<HTMLParagraphElement>('#getValue')\n\nconst $delKey = document.querySelector<HTMLInputElement>('#delKey')\n\nconst $withConverter = document.querySelector<HTMLButtonElement>('#withConverter')\nconst $withAttributes = document.querySelector<HTMLButtonElement>('#withAttributes')\n\nconst $cookie = document.querySelector('#cookie')\n\n$setForm.onsubmit = (e) => {\n  e.preventDefault()\n\n  const key = $setKey.value\n  const value = $setValue.value\n\n  myCookies.set(key, value)\n\n  $cookie.textContent = document.cookie\n}\n\n$getForm.onsubmit = (e) => {\n  e.preventDefault()\n\n  const key = $getKey.value\n\n  const value = myCookies.get(key)\n\n  $getValue.textContent = value\n}\n\n$delForm.onsubmit = (e) => {\n  e.preventDefault()\n\n  const key = $delKey.value\n\n  myCookies.del(key)\n\n  $cookie.textContent = document.cookie\n}\n\n$withConverter.onclick = () => {\n  myCookies = Cookies.withConverter({\n    encode: () => 'World',\n    decode: () => 'Hello',\n  })\n}\n\n$withAttributes.onclick = () => {\n  myCookies = Cookies.withAttributes({expires: 3})\n}\n\n$cookie.textContent = document.cookie\n"],"sourceRoot":""}